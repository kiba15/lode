// doctors.js
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const DOCTORS_CACHE_FILE = path.join(__dirname, 'doctors.json');

const START_DATE = new Date().toISOString();
const END_DATE = new Date(new Date().setMonth(new Date().getMonth() + 3)).toISOString();
const API_URL = `https://z-api-lode.vot.by/getAllData?start=${START_DATE}&end=${END_DATE}`;

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π –≤ `doctors.json`.
 * @param {boolean} forceUpdate - –µ—Å–ª–∏ true, —Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å API
 * @returns {Promise<Array>} - –º–∞—Å—Å–∏–≤ –≤—Ä–∞—á–µ–π
 */
export async function getAllDoctors(forceUpdate = false) {
  let cached = [];
  let fromCache = false;

  // 1. –ß—Ç–µ–Ω–∏–µ –∫—ç—à–∞
  if (!forceUpdate && fs.existsSync(DOCTORS_CACHE_FILE)) {
    try {
      cached = JSON.parse(fs.readFileSync(DOCTORS_CACHE_FILE, 'utf8'));
      if (Array.isArray(cached)) {
        fromCache = true;
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è doctors.json, –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω...');
    }
  }

  // 2. –ó–∞–ø—Ä–æ—Å API
  try {
    const res = await fetch(API_URL);
    const data = await res.json();
    const workers = data.workers || [];

    // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    if (!fromCache || cached.length !== workers.length) {
      fs.writeFileSync(DOCTORS_CACHE_FILE, JSON.stringify(workers, null, 2), 'utf8');
      console.log(`üìÑ doctors.json –æ–±–Ω–æ–≤–ª—ë–Ω (${workers.length} –∑–∞–ø–∏—Å–µ–π)`);
    }

    return workers;
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π —Å API:', err.message);
    return cached; // ‚¨ÖÔ∏è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à, –µ—Å–ª–∏ API —É–ø–∞–ª–æ
  }
}